name: Docker Build

on:
  push:
    branches:
      - '**'
  pull_request:

jobs:

  build-docker-images:

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Fill GitHub Environment Variables
        uses: FranzDiebold/github-env-vars-action@v2

      - name: Fill PHP Version Environment Variable
        uses: c-py/action-dotenv-to-setenv@v4
        with:
          env-file: .build.env

      - name: Prepare Workflow Environment
        id: prep
        run: |
          echo "docker-image-name=${DOCKER_IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "docker-image-name-dev=${DOCKER_IMAGE_NAME}-dev" >> $GITHUB_OUTPUT
          echo "build-date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Fill Docker Image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: "${{ steps.prep.outputs.docker-image-name }}"
          tags: |
            type=raw,value=rc

      - name: Fill Docker Image metadata (Dev)
        id: meta-dev
        uses: docker/metadata-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: "${{ steps.prep.outputs.docker-image-name-dev }}"
          tags: |
            type=raw,value=rc

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image
        id: build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          target: prd
          build-args: |
            VERSION_ARG=${{ env.ELASTICMS_WEBSITE_SKELETON_VERSION }}
            RELEASE_ARG=${{ env.CI_RUN_ID }}
            VCS_REF_ARG=${{ env.CI_SHA }}
            BUILD_DATE_ARG=${{ steps.prep.outputs.build-date }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/myimage.tar

      - name: Build Docker Image (Dev)
        id: build-dev
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          target: dev
          build-args: |
            VERSION_ARG=${{ env.ELASTICMS_WEBSITE_SKELETON_VERSION }}
            RELEASE_ARG=${{ env.CI_RUN_ID }}
            VCS_REF_ARG=${{ env.CI_SHA }}
            BUILD_DATE_ARG=${{ steps.prep.outputs.build-date }}
          push: false
          load: true
          tags: ${{ steps.meta-dev.outputs.tags }}
          labels: ${{ steps.meta-dev.outputs.labels }}
          outputs: type=docker,dest=/tmp/myimage-dev.tar

      - name: Squash Docker Image
        id: squash
        run: |
          pip install docker-squash
          cat /tmp/myimage.tar | docker load
          cat /tmp/myimage-dev.tar | docker load
          docker-squash --verbose --message "Build and Squashed in GitHub Action" \
            --tag ${{ steps.prep.outputs.docker-image-name }}:rc \
            --output-path /tmp/myimage.tar \
            ${{ steps.prep.outputs.docker-image-name }}:rc
          docker-squash --verbose --message "Build and Squashed in GitHub Action" \
            --tag ${{ steps.prep.outputs.docker-image-name-dev }}:rc \
            --output-path /tmp/myimage-dev.tar \
            ${{ steps.prep.outputs.docker-image-name-dev }}:rc
          cat /tmp/myimage.tar | docker load
          cat /tmp/myimage-dev.tar | docker load

      - name: Check Docker Image
        run: |
          docker image inspect ${{ steps.prep.outputs.docker-image-name }}:rc
          docker image inspect ${{ steps.prep.outputs.docker-image-name-dev }}:rc
          docker history ${{ steps.prep.outputs.docker-image-name }}:rc
          docker history ${{ steps.prep.outputs.docker-image-name-dev }}:rc
